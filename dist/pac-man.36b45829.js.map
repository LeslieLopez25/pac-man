{"version":3,"sources":["setup.js","ghostMoves.js","GameBoard.js","Pacman.js","Ghost.js","index.js"],"names":["GRID_SIZE","CELL_SIZE","DIRECTIONS","ArrowLeft","code","movement","rotation","ArrowUp","ArrowRight","ArrowDown","OBJECT_TYPE","BLANK","WALL","DOT","BLINKY","PINKY","INKY","CLYDE","PILL","PACMAN","GHOST","SCARED","GHOSTLAIR","CLASS_LIST","LEVEL","randomMovement","position","direction","objectExist","dir","nextMovePos","keys","Object","key","Math","floor","random","length","GameBoard","DOMGrid","pos","object","grid","classList","contains","dotCount","gameWin","div","document","createElement","add","innerHTML","appendChild","level","style","cssText","forEach","square","push","classes","remove","deg","transform","character","shouldMove","getNextMove","makeMove","classesToRemove","classesToAdd","rotateDiv","removeObject","addObject","setNewPos","board","createGrid","Pacman","speed","startPos","timer","powerPill","e","keyCode","Ghost","name","isScared","gameGrid","querySelector","scoreTable","startButton","POWER_PILL_TIME","GLOBAL_SPEED","gameBoard","createGameBoard","score","powerPillActive","powerPillTimer","playAudio","audio","Audio","play","gameOver","pacman","soundGameOver","removeEventListener","handleKeyInput","showGameStatus","clearInterval","checkCollision","ghosts","collidedGhost","find","ghost","soundGhost","gameLoop","moveCharacter","soundDot","soundPill","clearTimeout","setTimeout","startGame","soundGameStart","addEventListener","setInterval"],"mappings":";AAuDO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,MAAA,QAAA,UAAA,QAAA,WAAA,QAAA,WAAA,QAAA,eAAA,EAvDA,IAAMA,EAAY,GAuDlB,QAAA,UAAA,EAtDA,IAAMC,EAAY,GAsDlB,QAAA,UAAA,EArDA,IAAMC,EAAa,CACxBC,UAAW,CACTC,KAAM,GACNC,UAAW,EACXC,SAAU,KAEZC,QAAS,CACPH,KAAM,GACNC,UAAWL,EACXM,SAAU,KAEZE,WAAY,CACVJ,KAAM,GACNC,SAAU,EACVC,SAAU,GAEZG,UAAW,CACTL,KAAM,GACNC,SAAUL,EACVM,SAAU,KAkCP,QAAA,WAAA,EA9BA,IAAMI,EAAc,CACzBC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,UAAW,QAkBN,QAAA,YAAA,EAdA,IAAMC,EAAa,CACxBb,EAAYC,MACZD,EAAYE,KACZF,EAAYG,IACZH,EAAYI,OACZJ,EAAYK,MACZL,EAAYM,KACZN,EAAYO,MACZP,EAAYQ,KACZR,EAAYS,OACZT,EAAYY,WAIP,QAAA,WAAA,EAAA,IAAME,EAAQ,CACnB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EA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","file":"pac-man.36b45829.js","sourceRoot":"..","sourcesContent":["export const GRID_SIZE = 20;\nexport const CELL_SIZE = 20;\nexport const DIRECTIONS = {\n  ArrowLeft: {\n    code: 37,\n    movement: -1,\n    rotation: 180\n  },\n  ArrowUp: {\n    code: 38,\n    movement: -GRID_SIZE,\n    rotation: 270\n  },\n  ArrowRight: {\n    code: 39,\n    movement: 1,\n    rotation: 0\n  },\n  ArrowDown: {\n    code: 40,\n    movement: GRID_SIZE,\n    rotation: 90\n  }\n};\n\nexport const OBJECT_TYPE = {\n  BLANK: 'blank',\n  WALL: 'wall',\n  DOT: 'dot',\n  BLINKY: 'blinky',\n  PINKY: 'pinky',\n  INKY: 'inky',\n  CLYDE: 'clyde',\n  PILL: 'pill',\n  PACMAN: 'pacman',\n  GHOST: 'ghost',\n  SCARED: 'scared',\n  GHOSTLAIR: 'lair'\n};\n\n// Lookup array for classes\nexport const CLASS_LIST = [\n  OBJECT_TYPE.BLANK,\n  OBJECT_TYPE.WALL,\n  OBJECT_TYPE.DOT,\n  OBJECT_TYPE.BLINKY,\n  OBJECT_TYPE.PINKY,\n  OBJECT_TYPE.INKY,\n  OBJECT_TYPE.CLYDE,\n  OBJECT_TYPE.PILL,\n  OBJECT_TYPE.PACMAN,\n  OBJECT_TYPE.GHOSTLAIR\n];\n\n// prettier-ignore\nexport const LEVEL = [\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1,\n  1, 7, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 7, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1,\n  1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n  0, 0, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0,\n  0, 0, 0, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 0, 0, 0,\n  1, 1, 1, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 1, 1, 1, \n  1, 0, 0, 0, 2, 2, 2, 1, 9, 9, 9, 9, 1, 2, 2, 2, 0, 0, 0, 1, \n  1, 1, 1, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 1, 1, 1, \n  0, 0, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 0, 0,\n  0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 0, 0, 0,\n  1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n  1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 7, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 7, 1,\n  1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n","import { DIRECTIONS, OBJECT_TYPE } from \"./setup\";\r\n\r\n// PRIMITIVE RANDOM MOVEMENT\r\nexport function randomMovement(position, direction, objectExist) {\r\n  let dir = direction;\r\n  let nextMovePos = position + dir.movement;\r\n  // CREATE AN ARRAY FROM THE DIRECTIONS OBJECT KEYS\r\n  const keys = Object.keys(DIRECTIONS);\r\n\r\n  while (\r\n    objectExist(nextMovePos, OBJECT_TYPE.WALL) ||\r\n    objectExist(nextMovePos, OBJECT_TYPE.GHOST)\r\n  ) {\r\n    // GET A RANDOM KEY FROM THE KEY ARRAY\r\n    const key = keys[Math.floor(Math.random() * keys.length)];\r\n    // SET THE NEXT MOVE\r\n    dir = DIRECTIONS[key];\r\n    // SET THE NEXT MOVE\r\n    nextMovePos = position + dir.movement;\r\n  }\r\n  return { nextMovePos, direction: dir };\r\n}\r\n","import { GRID_SIZE, CELL_SIZE, OBJECT_TYPE, CLASS_LIST } from \"./setup\";\r\n\r\nclass GameBoard {\r\n  constructor(DOMGrid) {\r\n    this.dotCount = 0;\r\n    this.grid = [];\r\n    this.DOMGrid = DOMGrid;\r\n  }\r\n\r\n  showGameStatus(gameWin) {\r\n    const div = document.createElement(\"div\");\r\n    div.classList.add(\"game-status\");\r\n    div.innerHTML = `${gameWin ? \"WIN!\" : \"GAME OVER!\"}`;\r\n    this.DOMGrid.appendChild(div);\r\n  }\r\n\r\n  createGrid(level) {\r\n    this.dotCount = 0;\r\n    this.grid = [];\r\n    this.DOMGrid.innerHTML = \"\";\r\n    this.DOMGrid.style.cssText = `grid-template-columns: repeat(${GRID_SIZE}, ${CELL_SIZE}px)`;\r\n\r\n    level.forEach((square) => {\r\n      const div = document.createElement(\"div\");\r\n      div.classList.add(\"square\", CLASS_LIST[square]);\r\n      div.style.cssText = `width: ${CELL_SIZE}px; height: ${CELL_SIZE}px;`;\r\n      this.DOMGrid.appendChild(div);\r\n      this.grid.push(div);\r\n\r\n      if (CLASS_LIST[square] === OBJECT_TYPE.DOT) this.dotCount++;\r\n    });\r\n  }\r\n\r\n  addObject(pos, classes) {\r\n    this.grid[pos].classList.add(...classes);\r\n  }\r\n\r\n  removeObject(pos, classes) {\r\n    this.grid[pos].classList.remove(...classes);\r\n  }\r\n\r\n  objectExist = (pos, object) => {\r\n    return this.grid[pos].classList.contains(object);\r\n  };\r\n\r\n  rotateDiv(pos, deg) {\r\n    this.grid[pos].style.transform = `rotate(${deg}deg)`;\r\n  }\r\n\r\n  moveCharacter(character) {\r\n    if (character.shouldMove()) {\r\n      const { nextMovePos, direction } = character.getNextMove(\r\n        this.objectExist\r\n      );\r\n      const { classesToRemove, classesToAdd } = character.makeMove();\r\n\r\n      if (character.rotation && nextMovePos !== character.pos) {\r\n        this.rotateDiv(nextMovePos, character.dir.rotation);\r\n        this.rotateDiv(character.pos, 0);\r\n      }\r\n\r\n      this.removeObject(character.pos, classesToRemove);\r\n      this.addObject(nextMovePos, classesToAdd);\r\n\r\n      character.setNewPos(nextMovePos, direction);\r\n    }\r\n  }\r\n\r\n  static createGameBoard(DOMGrid, level) {\r\n    const board = new this(DOMGrid);\r\n    board.createGrid(level);\r\n    return board;\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import { OBJECT_TYPE, DIRECTIONS } from \"./setup\";\r\n\r\nclass Pacman {\r\n  constructor(speed, startPos) {\r\n    this.pos = startPos;\r\n    this.speed = speed;\r\n    this.dir = null;\r\n    this.timer = 0;\r\n    this.powerPill = false;\r\n    this.rotation = true;\r\n  }\r\n\r\n  shouldMove() {\r\n    if (!this.dir) return false;\r\n\r\n    if (this.timer === this.speed) {\r\n      this.timer = 0;\r\n      return true;\r\n    }\r\n    this.timer++;\r\n  }\r\n\r\n  getNextMove(objectExist) {\r\n    let nextMovePos = this.pos + this.dir.movement;\r\n\r\n    if (\r\n      objectExist(nextMovePos, OBJECT_TYPE.WALL) ||\r\n      objectExist(nextMovePos, OBJECT_TYPE.GHOSTLAIR)\r\n    ) {\r\n      nextMovePos = this.pos;\r\n    }\r\n\r\n    return { nextMovePos, direction: this.dir };\r\n  }\r\n\r\n  makeMove() {\r\n    const classesToRemove = [OBJECT_TYPE.PACMAN];\r\n    const classesToAdd = [OBJECT_TYPE.PACMAN];\r\n\r\n    return { classesToRemove, classesToAdd };\r\n  }\r\n\r\n  setNewPos(nextMovePos) {\r\n    this.pos = nextMovePos;\r\n  }\r\n\r\n  handleKeyInput(e, objectExist) {\r\n    let dir;\r\n\r\n    if (e.keyCode >= 37 && e.keyCode <= 40) {\r\n      dir = DIRECTIONS[e.key];\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    const nextMovePos = this.pos + dir.movement;\r\n    if (\r\n      objectExist(nextMovePos, OBJECT_TYPE.WALL) ||\r\n      objectExist(nextMovePos, OBJECT_TYPE.GHOSTLAIR)\r\n    )\r\n      return;\r\n    this.dir = dir;\r\n  }\r\n}\r\n\r\nexport default Pacman;\r\n","import { DIRECTIONS, OBJECT_TYPE } from \"./setup\";\r\n\r\nclass Ghost {\r\n  constructor(speed = 5, startPos, movement, name) {\r\n    this.name = name;\r\n    this.movement = movement;\r\n    this.startPos = startPos;\r\n    this.pos = startPos;\r\n    this.dir = DIRECTIONS.ArrowRight;\r\n    this.speed = speed;\r\n    this.timer = 0;\r\n    this.isScared = false;\r\n    this.rotation = false;\r\n  }\r\n\r\n  shouldMove() {\r\n    if (this.timer === this.speed) {\r\n      this.timer = 0;\r\n      return true;\r\n    }\r\n    this.timer++;\r\n    return false;\r\n  }\r\n\r\n  getNextMove(objectExist) {\r\n    const { nextMovePos, direction } = this.movement(\r\n      this.pos,\r\n      this.dir,\r\n      objectExist\r\n    );\r\n    return { nextMovePos, direction };\r\n  }\r\n\r\n  makeMove() {\r\n    const classesToRemove = [OBJECT_TYPE.GHOST, OBJECT_TYPE.SCARED, this.name];\r\n    let classesToAdd = [OBJECT_TYPE.GHOST, this.name];\r\n\r\n    if (this.isScared) classesToAdd = [...classesToAdd, OBJECT_TYPE.SCARED];\r\n\r\n    return { classesToRemove, classesToAdd };\r\n  }\r\n\r\n  setNewPos(nextMovePos, direction) {\r\n    this.pos = nextMovePos;\r\n    this.dir = direction;\r\n  }\r\n}\r\n\r\nexport default Ghost;\r\n","import { LEVEL, OBJECT_TYPE } from \"./setup\";\nimport { randomMovement } from \"./ghostMoves\";\n// CLASSES\nimport GameBoard from \"./GameBoard\";\nimport Pacman from \"./Pacman\";\nimport Ghost from \"./Ghost\";\n// SOUNDS\nimport soundDot from \"./sounds/munch.wav\";\nimport soundPill from \"./sounds/pill.wav\";\nimport soundGameStart from \"./sounds/game_start.wav\";\nimport soundGameOver from \"./sounds/death.wav\";\nimport soundGhost from \"./sounds/eat_ghost.wav\";\n\n// DOM ELEMENTS\nconst gameGrid = document.querySelector(\"#game\");\nconst scoreTable = document.querySelector(\"#score\");\nconst startButton = document.querySelector(\"#start-button\");\n\n// GAME CONSTANTS\nconst POWER_PILL_TIME = 10000; //ms\nconst GLOBAL_SPEED = 80; //ms\nconst gameBoard = GameBoard.createGameBoard(gameGrid, LEVEL);\n\n// INITAL SETUP\nlet score = 0;\nlet timer = null;\nlet gameWin = false;\nlet powerPillActive = false;\nlet powerPillTimer = null;\n\n// AUDIO\nfunction playAudio(audio) {\n  const soundEffect = new Audio(audio);\n  soundEffect.play();\n}\n\nfunction gameOver(pacman, grid) {\n  playAudio(soundGameOver);\n\n  document.removeEventListener(\"keydown\", (e) =>\n    pacman.handleKeyInput(e, gameBoard.objectExist)\n  );\n\n  gameBoard.showGameStatus(gameWin);\n\n  clearInterval(timer);\n\n  startButton.classList.remove(\"hide\");\n}\n\nfunction checkCollision(pacman, ghosts) {\n  const collidedGhost = ghosts.find((ghost) => pacman.pos === ghost.pos);\n\n  if (collidedGhost) {\n    // PACMAN EATS GHOST\n    if (pacman.powerPill) {\n      playAudio(soundGhost);\n      gameBoard.removeObject(collidedGhost.pos, [\n        OBJECT_TYPE.GHOST,\n        OBJECT_TYPE.SCARED,\n        collidedGhost.name,\n      ]);\n      collidedGhost.pos = collidedGhost.startPos;\n      score += 100;\n    } else {\n      gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.PACMAN]);\n      gameBoard.rotateDiv(pacman.pos, 0);\n      gameOver(pacman, gameGrid);\n    }\n  }\n}\n\nfunction gameLoop(pacman, ghosts) {\n  gameBoard.moveCharacter(pacman);\n  checkCollision(pacman, ghosts);\n\n  ghosts.forEach((ghost) => gameBoard.moveCharacter(ghost));\n  checkCollision(pacman, ghosts);\n\n  // CHECK IF PACMAN EATS A DOT\n  if (gameBoard.objectExist(pacman.pos, OBJECT_TYPE.DOT)) {\n    playAudio(soundDot);\n    gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.DOT]);\n    gameBoard.dotCount--;\n    score += 10;\n  }\n  // CHECK IF PACMAN EATS A POWERPILL\n  if (gameBoard.objectExist(pacman.pos, OBJECT_TYPE.PILL)) {\n    playAudio(soundPill);\n    gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.PILL]);\n\n    pacman.powerPill = true;\n    score += 50;\n\n    clearTimeout(powerPillTimer);\n    powerPillTimer = setTimeout(\n      () => (pacman.powerPill = false),\n      POWER_PILL_TIME\n    );\n  }\n\n  // CHANGE GHOST SCARE MODE DEPENDING ON POWERPILL\n  if (pacman.powerPill !== powerPillActive) {\n    powerPillActive = pacman.powerPill;\n    ghosts.forEach((ghost) => (ghost.isScared = pacman.powerPill));\n  }\n\n  // CHECK IF ALL DOTS HAVE BEEN EATEN\n  if (gameBoard.dotCount === 0) {\n    gameWin = true;\n    gameOver(pacman, ghosts);\n  }\n\n  // SHOW THE SCORE\n  scoreTable.innerHTML = score;\n}\n\nfunction startGame() {\n  playAudio(soundGameStart);\n  gameWin = false;\n  powerPillActive = false;\n  score = 0;\n\n  startButton.classList.add(\"hide\");\n\n  gameBoard.createGrid(LEVEL);\n\n  const pacman = new Pacman(2, 287);\n  gameBoard.addObject(287, [OBJECT_TYPE.PACMAN]);\n  document.addEventListener(\"keydown\", (e) =>\n    pacman.handleKeyInput(e, gameBoard.objectExist)\n  );\n\n  const ghosts = [\n    new Ghost(5, 188, randomMovement, OBJECT_TYPE.BLINKY),\n    new Ghost(4, 209, randomMovement, OBJECT_TYPE.PINKY),\n    new Ghost(3, 230, randomMovement, OBJECT_TYPE.INKY),\n    new Ghost(2, 251, randomMovement, OBJECT_TYPE.CLYDE),\n  ];\n\n  timer = setInterval(() => gameLoop(pacman, ghosts), GLOBAL_SPEED);\n}\n\n// INITIALIZE GAME\nstartButton.addEventListener(\"click\", startGame);\n"]}